Mysql SQL Queries:

CREATE TABLE persons3 (
        PersonID int,
         LastName varchar(255),
        FirstName varchar(255),
         Address varchar(255),
         City varchar(255)
     );


insert into persons3 values (11, 'abnave', 'mangesh', 'pune', 'pune')


Inserting special characters:

\0 - An ASCII NUL (0x00) character.
\' - A single quote (') character.
\" - A double quote (") character.
\b - A backspace character.
\n - A newline (linefeed) character.
\r - A carriage return character.
\t - A tab character.
\Z - ASCII 26 (Control-Z).
\\ - A backslash (\) character.
\% - A % character.
\_ - A _ character.


create table AvoidInsertErrorDemo
(
 Id int,
 Sentence text
 );

insert into AvoidInsertErrorDemo values (1, 'I am doctor\'s machine');
insert into AvoidInsertErrorDemo values (1, 'My name is Mangesh \n I am working as computer\'s');


Inserting Null Values:
insert into persons3 values (NULL, 'abnave', 'mangesh', 'pune', 'pune');
insert into persons3(LastName,FirstName,Address,City) values ('abnave', 'mangesh', 'pune', 'pune')


Insert from another table:-
create table persons2 as select * from persons3;
insert into persons2 select PersonID, LastName, FirstName, Address, City from persons3;
insert into persons2(PersonID, LastName) select PersonID, LastName from persons3;


Ingore Statement with Primary key:
alter table persons2 add constraint pk_person primary key (PersonID);
insert ignore into persons2 values (1, 'abnave', 'mangesh', 'pune', 'pune');


Copy the structrue of one table to another table: 
create table persons2 as select * from persons;
truncate persons2;


Altering the tables:

Addition of the column:

alter table persons2 add DOB date;

insert ignore into persons2 values (2, 'abnave', 'mangesh', 'pune', 'pune', '1980-12-31');

select year(curdate())-year(DOB) as StudentAge from persons2;


Dropping the column:
alter table persons2 drop DOB;


Changing the datatype of the column:
alter table persons2 modify column PersonID mediumint ;


Rename the column name : 
alter table persons2 rename column LastName to LName;
alter table persons2 change LName Surname varchar(255);


Rename Multiple Columns:
alter table persons2 change  Surname  Lname varchar(255), change FirstName Name varchar(255);
alter table persons2 rename column Lname to surname, rename column Address to myaddress;



Turn off the autocommit option in mysql:

set autocommit=0  



Constraints:

To find out the information about the constraint in mysql:
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME
    -> FROM information_schema.table_constraints
    -> WHERE table_name='identity';


Not null and unique constraint while creating the table:

create table notnulltable (
     id int UNIQUE  NOT NULL,
     name varchar(50) NOT NULL
     );
	 
Kindly test the null constraint.

Addition of NOT NULL after the table creation:

create table notnulltable (
     id int ,
     name varchar(50) 
     );


alter table notnulltable modify id int NOT NULL;


Unique Key Constraint:

CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID)
);


Addition of unique constraint with alter table:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

# ALTER TABLE Persons ADD UNIQUE (ID);
# alter table notnulltable add constraint my_null_constrain unique (id);
	 
	 
Dropping the unique key constraint:
ALTER TABLE Persons DROP INDEX UC_Person;





Check Constraint with Default value

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    age int CHECK (age >= 18),
	city varchar(50) Default 'Pune',
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);


#  insert into Persons (ID,LastName,FirstName,age) values (1,'abnave','mangesh',20);
#  insert into Persons (ID,LastName,FirstName,age) values (2,'abnave','mangesh',10);


Add the check constraint with alter table:

ALTER TABLE Persons ADD CHECK (Age>=18);
ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18);


Add default constraint with alter table:
ALTER TABLE Persons ALTER City SET DEFAULT 'Pune';
ALTER TABLE Persons MODIFY City DEFAULT 'Pune';


dropping the check constraint:
alter table persons3 DROP constraint  CONSTRAINT_1;

dropping the default constraint:
ALTER TABLE Persons ALTER City DROP DEFAULT;



Primary and Foregin Key:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);


CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);


To see what indexes has been created by the primary key:-

show index from persons3;

SELECT DISTINCT
    TABLE_NAME,
    INDEX_NAME
FROM INFORMATION_SCHEMA.STATISTICS
WHERE TABLE_SCHEMA = 'employee';


Addition of Primary key with the help of alter table:
ALTER TABLE Persons ADD PRIMARY KEY (ID);
ALTER TABLE Persons ADD CONSTRAINT PK_Person PRIMARY KEY (ID);

Dropping the primary key:
ALTER TABLE Persons DROP PRIMARY KEY;


Foreign Key Constraints:

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
	ON DELETE CASCADE
);



CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
	
);


Kindly check all the DML statements:

Addition of the Foreign Key with alter table command:
ALTER TABLE Orders ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);
ALTER TABLE Orders ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

Drop the Foreign key constraints:
ALTER TABLE Orders DROP FOREIGN KEY FK_PersonOrder;


Auto increment:

CREATE TABLE persons1 (
         id int NOT NULL AUTO_INCREMENT,
         LastName varchar(255),
         FirstName varchar(255),
         Address varchar(255),
         City varchar(255),
		 Unique Key (id)
     );
	
insert into persons1 values (NULL,'abnave', 'mangesh', 'pune', 'pune');




create table persons2 as select * from persons;


Create a view from the table:

create view mangesh as select * from persons3;

SHOW FULL TABLES IN employee WHERE TABLE_TYPE LIKE 'VIEW';


Create the index on the table:




joins:

Inner Join:

create table department(
dept_id int Primary key,
dept_name varchar(50));


insert into department values (1001, 'Finance'), (1002, 'Markting'), (1003, 'Sales'), (1004, 'Coding'), (1005, 'Administration')


create table employee(
emp_id int primary key,
emp_name varchar(100),
salary int(19),
dept_id int,
foreign key (dept_id) references department(dept_id));


select * from employee inner join department on employee.dept_id = department.dept_id;

select employee.emp_id, employee.emp_name, dept_name, department.dept_id from employee inner join department on employee.dept_id = department.dept_id;


OR

select employee.emp_id, employee.emp_name, department.dept_name from employee,department where employee.dept_id=department.dept_id;




Left and Right Join:

select employee.emp_id, employee.emp_name, dept_name, department.dept_id from employee left join department on employee.dept_id = department.dept_id;


select employee.emp_id, employee.emp_name, dept_name, department.dept_id from employee right join department on employee.dept_id = department.dept_id;


Cross Join:

select * from employee cross join department;


select a.emp_name as employee_name, b.emp_name as manager from employee a, employee b where a.mgr_id = b.emp_id;



AND and OR Operator:

comparision Operator:
=, <>, <, > <=, =>


select * from employee where emp_id > 100 and salary < 20000;
select * from employee where emp_id = 10 or salary > 20000;


IN and between Operator:

select * from employee where salary  in (10000, 11000);
select * from employee where salary not in (10000, 11000);

select * from employee where salary  between 10000 and 20000;
select * from employee where salary not  between 10000 and 20000;


Null Operator:

select * from employee where dept_id  is null;
select * from employee where dept_id  is not null;


Like Operator:

select * from employee where emp_name like 's%';


Contact Function:

select concat(LName , FName) AS full_name from persons3;
select concat(LName ,' ', FName) AS full_name from persons3;


with an ANSI method:

set sql_mod='ANSI'
select LName || ' ' ||FName AS full_name from persons3;



Regular Expression:

name end with h:
select * from employee where emp_name regexp 'h$';

name contains the word hi:
select * from employee where emp_name regexp 'hi'
 
name starting with word A:

select * from employee where emp_name regexp '^A';

Name will start with anything bracket
select * from employee where emp_name regexp '^[aeiou].*h$'; 


order by :

select * from employee order by salary;
select * from employee order by 1;
select * from employee order by salary desc;
select * from employee order by salary,emp_name;
select * from employee order by salary,emp_name desc;
select emp_id "ID", emp_name "name" from employee order by name;


Reading the data from Select:
select distinct(adr) from persons3;


Arthmetic Operators:

CREATE TABLE salary (
  Id INT PRIMARY KEY,
  Name VARCHAR(45) NOT NULL,
  Department VARCHAR(45) NOT NULL,
  Salary FLOAT NOT NULL,
  Gender VARCHAR(45) NOT NULL,
  Age INT NOT NULL,
  City VARCHAR(45) NOT NULL
);

INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1001, 'John Doe', 'IT', 35000, 'Male', 25, 'London');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1002, 'Mary Smith', 'HR', 45000, 'Female', 27, 'London');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1003, 'James Brown', 'Finance', 50000, 'Male', 28, 'London');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1004, 'Mike Walker', 'Finance', 50000, 'Male', 28, 'London');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1005, 'Linda Jones', 'HR', 75000, 'Female', 26, 'London');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1006, 'Anurag Mohanty', 'IT', 35000, 'Male', 25, 'Mumbai');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1007, 'Priyanla Dewangan', 'HR', 45000, 'Female', 27, 'Mumbai');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1008, 'Sambit Mohanty', 'IT', 50000, 'Male', 28, 'Mumbai');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1009, 'Pranaya Kumar', 'IT', 50000, 'Male', 28, 'Mumbai');
INSERT INTO salary (Id, `Name`, Department, Salary, Gender, Age, City) VALUES (1010, 'Hina Sharma', 'HR', 75000, 'Female', 26, 'Mumbai');


SELECT ID, Name, Salary, Salary * 1.1 AS Bonus FROM salary;
SELECT ID, Name, Salary, round(Salary * 1.1) AS Bonus FROM salary;
SELECT ID, Name, Salary, Salary * 0.11 / 2.54 + 27.36 AS Bonus FROM salary;

Parentheses, Exponents, Multiplication and Division (from left to right), Addition and Subtraction (from left to right).

select 1 + 1 - 1 * (4 / 2) from dual;
select power(2,9) from dual;



Literal Strings:
Escape single quote character by backward slash:
select 'This is traver\'s blog' from dual;

Use two single quote characters instead of escaping:
select 'This is traver''s blog' from dual;

Escape double quote character by backward slash:
select "this is \"myvalue\"" from dual;

Use two double quote characters instead of escaping:
select "this is ""myvalue""" from dual;

select "this is my travler's blog" from dual;




Group by and having :

select department, avg(salary) from salary group by Department;

select city, count(city) from salary group by city;

select department, count(Department) from salary group by department;

select department, count(gender), gender from salary group by gender;

select avg(age), gender, department from salary group by age;

select avg(age), gender, department from salary group by age having age > 25;



SubQuery;

select name from salary where salary = (select max(salary) from salary);
select name, city from salary where city = (select distinct(city) from salary where city like 'm%');
select name, city from salary where city in (select distinct(city) from salary);


Use the concept of alias:
SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;




